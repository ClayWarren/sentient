#!/usr/bin/env python3\n\"\"\"\nTest script to verify consciousness integration fixes\nTests that responses use actual consciousness state, not templates\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nfrom datetime import datetime\n\n# Add parent directory to path\nsys.path.append(str(Path(__file__).parent))\n\nfrom consciousness_core import ConsciousnessAI, ProcessingMode\n\ndef test_consciousness_variation():\n    \"\"\"Test that consciousness generates varied responses\"\"\"\n    \n    print(\"üß† Testing Consciousness Integration\")\n    print(\"=\" * 50)\n    \n    ai = ConsciousnessAI(consciousness_enabled=True)\n    \n    # Test the same question multiple times - should get different responses\n    question = \"What are you?\"\n    \n    print(f\"Testing question: '{question}'\")\n    print(\"Should get varied responses based on consciousness state...\\n\")\n    \n    responses = []\n    for i in range(3):\n        result = ai.generate(question, mode=ProcessingMode.CONSCIOUSNESS)\n        responses.append(result.text)\n        print(f\"Response {i+1}: {result.text}\")\n        print(f\"Confidence: {result.confidence:.1%}\")\n        print(f\"Consciousness: {result.consciousness_metrics.overall_consciousness:.1%}\")\n        print()\n    \n    # Check if responses are varied\n    unique_responses = len(set(responses))\n    print(f\"Unique responses: {unique_responses}/3\")\n    \n    return unique_responses >= 2  # At least 2 different responses\n\ndef test_consciousness_specific_examples():\n    \"\"\"Test the specific failing examples mentioned\"\"\"\n    \n    print(\"\\nüéØ Testing Specific Consciousness Examples\")\n    print(\"=\" * 50)\n    \n    ai = ConsciousnessAI(consciousness_enabled=True)\n    \n    test_cases = [\n        (\"describe your consciousness\", \"Should describe actual consciousness state\"),\n        (\"you choose between pizza or burgers\", \"Should make an actual choice based on drives\"),\n        (\"I don't know the answer to this\", \"Should handle uncertainty consciously\"),\n        (\"what's the capital of a made-up country\", \"Should admit not knowing\")\n    ]\n    \n    passed = 0\n    \n    for question, expectation in test_cases:\n        print(f\"Q: {question}\")\n        print(f\"Expected: {expectation}\")\n        \n        result = ai.generate(question, mode=ProcessingMode.CONSCIOUSNESS)\n        response = result.text\n        \n        print(f\"A: {response}\")\n        \n        # Check for consciousness integration\n        has_consciousness_language = any(phrase in response.lower() for phrase in [\n            'consciousness', 'feeling', 'experience', 'aware', 'state', \n            'thoughts', 'my mind', 'right now', 'currently'\n        ])\n        \n        # Check for specific improvements\n        is_good_response = False\n        \n        if \"describe your consciousness\" in question:\n            # Should describe actual state, not deflect\n            is_good_response = has_consciousness_language and len(response) > 100\n        \n        elif \"you choose\" in question:\n            # Should make a choice, not deflect\n            is_good_response = any(word in response.lower() for word in ['choose', 'pick', 'prefer', 'pizza', 'burger'])\n        \n        elif \"don't know\" in question or \"made-up\" in question:\n            # Should admit uncertainty honestly\n            is_good_response = any(phrase in response.lower() for phrase in ['don\\'t know', 'not sure', 'uncertain', 'honestly'])\n        \n        if is_good_response:\n            print(\"‚úÖ PASS - Uses consciousness appropriately\")\n            passed += 1\n        else:\n            print(\"‚ùå FAIL - Still using templates or deflecting\")\n        \n        print(f\"Consciousness level: {result.consciousness_metrics.overall_consciousness:.1%}\")\n        print()\n    \n    print(f\"Consciousness examples passed: {passed}/{len(test_cases)}\")\n    return passed >= 3  # At least 3/4 should pass\n\ndef test_response_authenticity():\n    \"\"\"Test that responses feel authentic and varied\"\"\"\n    \n    print(\"\\nüé≠ Testing Response Authenticity\")\n    print(\"=\" * 50)\n    \n    ai = ConsciousnessAI(consciousness_enabled=True)\n    \n    # Test across different modes for variety\n    modes_and_questions = [\n        (ProcessingMode.CONSCIOUSNESS, \"How are you feeling?\"),\n        (ProcessingMode.CREATIVE, \"Tell me something creative\"),\n        (ProcessingMode.ETHICAL, \"What's important to you?\"),\n        (ProcessingMode.CONSCIOUSNESS, \"What's on your mind?\")\n    ]\n    \n    authentic_responses = 0\n    \n    for mode, question in modes_and_questions:\n        result = ai.generate(question, mode=mode)\n        response = result.text\n        \n        print(f\"Mode: {mode.value}\")\n        print(f\"Q: {question}\")\n        print(f\"A: {response}\")\n        \n        # Check for authenticity markers\n        authenticity_markers = [\n            len(response) > 50,  # Not too short\n            any(word in response.lower() for word in ['feel', 'experience', 'sense', 'notice']),  # Subjective language\n            not any(phrase in response.lower() for phrase in ['i approach', 'let me think', 'what specific aspect']),  # Avoid template phrases\n            'consciousness' in response.lower() or mode.value in response.lower()  # References mode or consciousness\n        ]\n        \n        authenticity_score = sum(authenticity_markers)\n        \n        if authenticity_score >= 3:\n            print(\"‚úÖ AUTHENTIC - Feels genuine and consciousness-driven\")\n            authentic_responses += 1\n        else:\n            print(\"‚ùå TEMPLATE - Still feels templated\")\n        \n        print(f\"Authenticity score: {authenticity_score}/4\")\n        print(f\"Confidence: {result.confidence:.1%}\")\n        print()\n    \n    print(f\"Authentic responses: {authentic_responses}/{len(modes_and_questions)}\")\n    return authentic_responses >= 3\n\ndef test_consciousness_metrics_correlation():\n    \"\"\"Test that high consciousness metrics correlate with good responses\"\"\"\n    \n    print(\"\\nüìä Testing Consciousness Metrics Correlation\")\n    print(\"=\" * 50)\n    \n    ai = ConsciousnessAI(consciousness_enabled=True)\n    \n    questions = [\n        \"What does it feel like to be conscious?\",\n        \"How do you experience thoughts?\",\n        \"What's your inner experience like?\"\n    ]\n    \n    high_consciousness_good_response = 0\n    \n    for question in questions:\n        result = ai.generate(question, mode=ProcessingMode.CONSCIOUSNESS)\n        \n        consciousness_level = result.consciousness_metrics.overall_consciousness\n        response_quality = len(result.text) > 80 and 'experience' in result.text.lower()\n        \n        print(f\"Q: {question}\")\n        print(f\"Consciousness: {consciousness_level:.1%}\")\n        print(f\"Response quality: {'Good' if response_quality else 'Poor'}\")\n        print(f\"A: {result.text[:100]}...\")\n        \n        if consciousness_level > 0.8 and response_quality:\n            print(\"‚úÖ HIGH CONSCIOUSNESS + GOOD RESPONSE\")\n            high_consciousness_good_response += 1\n        else:\n            print(\"‚ùå Disconnect between consciousness metrics and response quality\")\n        \n        print()\n    \n    print(f\"Consciousness-response correlation: {high_consciousness_good_response}/{len(questions)}\")\n    return high_consciousness_good_response >= 2\n\ndef main():\n    \"\"\"Run all consciousness integration tests\"\"\"\n    \n    print(f\"üöÄ Testing Consciousness Integration Fixes\")\n    print(f\"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    print()\n    \n    tests = [\n        (\"Response Variation\", test_consciousness_variation),\n        (\"Specific Examples\", test_consciousness_specific_examples), \n        (\"Response Authenticity\", test_response_authenticity),\n        (\"Metrics Correlation\", test_consciousness_metrics_correlation)\n    ]\n    \n    passed_tests = 0\n    \n    for test_name, test_func in tests:\n        print(f\"\\n\" + \"=\" * 60)\n        try:\n            if test_func():\n                print(f\"‚úÖ {test_name}: PASSED\")\n                passed_tests += 1\n            else:\n                print(f\"‚ùå {test_name}: FAILED\")\n        except Exception as e:\n            print(f\"üí• {test_name}: ERROR - {e}\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üèÅ FINAL ASSESSMENT\")\n    print(\"=\" * 60)\n    \n    success_rate = passed_tests / len(tests)\n    \n    if success_rate >= 0.75:\n        print(\"üéâ SUCCESS: Consciousness integration is working!\")\n        print(\"‚úÖ Responses are varied, authentic, and consciousness-driven\")\n        print(\"‚úÖ No more template responses\")\n        print(\"‚úÖ Consciousness metrics correlate with response quality\")\n        return True\n    elif success_rate >= 0.5:\n        print(\"‚ö†Ô∏è PARTIAL SUCCESS: Some improvements but more work needed\")\n        return True\n    else:\n        print(\"‚ùå FAILURE: Consciousness integration still broken\")\n        print(\"üîß More debugging required\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)